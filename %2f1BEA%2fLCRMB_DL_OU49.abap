FUNCTION /1BEA/CRMB_DL_O_GETCORRITEM.
*"--------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(IS_DLI) TYPE  /1BEA/S_CRMB_DLI_WRK
*"     REFERENCE(IV_INP_PROC) TYPE  C OPTIONAL
*"  EXPORTING
*"     REFERENCE(ET_DLI) TYPE  /1BEA/T_CRMB_DLI_WRK
*"     REFERENCE(ET_RETURN) TYPE  BEAT_RETURN
*"--------------------------------------------------------------------
*======================================================================
*
* The following coding has been generated. Please do not change
* manually. All modifications will be lost by new generation.
*
* The code generation was triggered by
*
* Name  : DDIC
* Date  : 03.05.2012
* Time  : 13:53:10
*
*======================================================================
 FIELD-SYMBOLS:
   <DLI>           TYPE /1BEA/S_CRMB_DLI_WRK.
 DATA:
   LV_TABIX        TYPE SYTABIX,
   LV_TABIX_F      TYPE SYTABIX,
   LV_SEARCHING    TYPE C,
   LS_RETURN       TYPE BEAS_RETURN,
   LT_RETURN       TYPE BEAT_RETURN,
   LS_DLI_WRK      TYPE /1BEA/S_CRMB_DLI_WRK,
   LS_DLI_WRK_F    TYPE /1BEA/S_CRMB_DLI_WRK,
   LT_DLI_WRK      TYPE /1BEA/T_CRMB_DLI_WRK,
   LT_DLI_BUF      TYPE /1BEA/T_CRMB_DLI_WRK,
   LT_DLI_DOC      TYPE /1BEA/T_CRMB_DLI_WRK,
   LT_DLI          TYPE /1BEA/T_CRMB_DLI_WRK,
   LT_DLI_OV       TYPE /1BEA/T_CRMB_DLI_WRK,
   LRS_LOGSYS TYPE /1BEA/RS_CRMB_LOGSYS,
   LRT_LOGSYS TYPE /1BEA/RT_CRMB_LOGSYS,
   LV_LOGSYS TYPE /1BEA/US_CRMB_DL_DLI_DG_ID-LOGSYS,
   LRS_OBJTYPE TYPE /1BEA/RS_CRMB_OBJTYPE,
   LRT_OBJTYPE TYPE /1BEA/RT_CRMB_OBJTYPE,
   LV_OBJTYPE TYPE /1BEA/US_CRMB_DL_DLI_DG_ID-OBJTYPE,
   LRS_SRC_HEADNO TYPE /1BEA/RS_CRMB_SRC_HEADNO,
   LRT_SRC_HEADNO TYPE /1BEA/RT_CRMB_SRC_HEADNO,
   LV_SRC_HEADNO TYPE /1BEA/US_CRMB_DL_DLI_DG_ID-SRC_HEADNO,
   LRS_SRC_ITEMNO TYPE /1BEA/RS_CRMB_SRC_ITEMNO,
   LRT_SRC_ITEMNO TYPE /1BEA/RT_CRMB_SRC_ITEMNO,
   LV_SRC_ITEMNO TYPE /1BEA/US_CRMB_DL_DLI_DG_ID-SRC_ITEMNO,
   LRS_DERIV_CATEGORY_2 TYPE /1BEA/RS_CRMB_DERIV_CATEGORY,
   LRT_DERIV_CATEGORY_2 TYPE /1BEA/RT_CRMB_DERIV_CATEGORY,
   LRS_LOGSYS_2 TYPE /1BEA/RS_CRMB_LOGSYS,
   LRT_LOGSYS_2 TYPE /1BEA/RT_CRMB_LOGSYS,
   LRS_OBJTYPE_2 TYPE /1BEA/RS_CRMB_OBJTYPE,
   LRT_OBJTYPE_2 TYPE /1BEA/RT_CRMB_OBJTYPE,
   LRS_SRC_HEADNO_2 TYPE /1BEA/RS_CRMB_SRC_HEADNO,
   LRT_SRC_HEADNO_2 TYPE /1BEA/RT_CRMB_SRC_HEADNO,
   LRS_SRC_ITEMNO_2 TYPE /1BEA/RS_CRMB_SRC_ITEMNO,
   LRT_SRC_ITEMNO_2 TYPE /1BEA/RT_CRMB_SRC_ITEMNO,
   LV_DERIV_CATEGORY  TYPE BEA_DERIV_CATEGORY,
   LRS_BILL_STATUS    TYPE BEARS_BILL_STATUS,
   LRT_BILL_STATUS    TYPE BEART_BILL_STATUS.

 CLEAR ET_DLI.

* check relevance
 CHECK
   NOT IS_DLI-LOGSYS IS INITIAL AND
   NOT IS_DLI-OBJTYPE IS INITIAL AND
   NOT IS_DLI-SRC_HEADNO IS INITIAL AND
   NOT IS_DLI-SRC_ITEMNO IS INITIAL.

 LV_LOGSYS = IS_DLI-LOGSYS.
 LV_OBJTYPE = IS_DLI-OBJTYPE.
 LV_SRC_HEADNO = IS_DLI-SRC_HEADNO.
 LV_SRC_ITEMNO = IS_DLI-SRC_ITEMNO.
 LV_DERIV_CATEGORY = IS_DLI-DERIV_CATEGORY.

*------------------------------------------------------------
* Step 1 - Check if Due List Items are linked directly
* -> source application delivers such a connection
* (invoice correction, complaint management)
* -> event as no fixed reference existing
*------------------------------------------------------------
* Event BD_OGCI1
  INCLUDE %2f1BEA%2fX_CRMBBD_OGCI1COBODL_REF.
  INCLUDE %2f1BEA%2fX_CRMBBD_OGCI1COBODL_GET.
*------------------------------------------------------------
* Step 3 - Determination of DLI to be corrected
* read diff group from buffer and DB and sort
* read current src_ref and search for the next one
* LT_DLI_DOC + getchangeabl
*------------------------------------------------------------
 IF LT_DLI IS INITIAL.
* read buffer
   LOOP AT GT_DLI_WRK ASSIGNING <DLI>
     WHERE
       UPD_TYPE EQ GC_UPDATE AND
       DERIV_CATEGORY EQ LV_DERIV_CATEGORY AND
       LOGSYS EQ LV_LOGSYS AND
       OBJTYPE EQ LV_OBJTYPE AND
       SRC_HEADNO EQ LV_SRC_HEADNO AND
       SRC_ITEMNO EQ LV_SRC_ITEMNO.
     APPEND <DLI> TO LT_DLI_BUF.
   ENDLOOP.

* read database
   IF
     GS_DLI_DGB-LOGSYS NE LV_LOGSYS OR
     GS_DLI_DGB-OBJTYPE NE LV_OBJTYPE OR
     GS_DLI_DGB-SRC_HEADNO NE LV_SRC_HEADNO OR
     GS_DLI_DGB-SRC_ITEMNO NE LV_SRC_ITEMNO.
     GS_DLI_DGB-LOGSYS = LV_LOGSYS.
     GS_DLI_DGB-OBJTYPE = LV_OBJTYPE.
     GS_DLI_DGB-SRC_HEADNO = LV_SRC_HEADNO.
     GS_DLI_DGB-SRC_ITEMNO = LV_SRC_ITEMNO.
* enqueue DG
     CALL FUNCTION '/1BEA/CRMB_DL_O_ENQUEUE'
       EXPORTING
         IS_DLI_WRK       = GS_DLI_DGB
       IMPORTING
         ES_RETURN        = LS_RETURN.
     IF NOT LS_RETURN IS INITIAL.
       CLEAR GS_DLI_DGB.
       APPEND LS_RETURN TO ET_RETURN.
       RETURN.
     ENDIF.
     CLEAR GT_DLI_DGB.
     LRS_LOGSYS-SIGN    = GC_INCLUDE.
     LRS_LOGSYS-OPTION  = GC_EQUAL.
     LRS_LOGSYS-LOW     = LV_LOGSYS.
     APPEND LRS_LOGSYS TO LRT_LOGSYS.
     LRS_OBJTYPE-SIGN    = GC_INCLUDE.
     LRS_OBJTYPE-OPTION  = GC_EQUAL.
     LRS_OBJTYPE-LOW     = LV_OBJTYPE.
     APPEND LRS_OBJTYPE TO LRT_OBJTYPE.
     LRS_SRC_HEADNO-SIGN    = GC_INCLUDE.
     LRS_SRC_HEADNO-OPTION  = GC_EQUAL.
     LRS_SRC_HEADNO-LOW     = LV_SRC_HEADNO.
     APPEND LRS_SRC_HEADNO TO LRT_SRC_HEADNO.
     LRS_SRC_ITEMNO-SIGN    = GC_INCLUDE.
     LRS_SRC_ITEMNO-OPTION  = GC_EQUAL.
     LRS_SRC_ITEMNO-LOW     = LV_SRC_ITEMNO.
     APPEND LRS_SRC_ITEMNO TO LRT_SRC_ITEMNO.
     LRS_BILL_STATUS-SIGN   = GC_INCLUDE.
     LRS_BILL_STATUS-OPTION = GC_EQUAL.
     LRS_BILL_STATUS-LOW    = GC_BILLSTAT_DONE.
     APPEND LRS_BILL_STATUS TO LRT_BILL_STATUS.
     LRS_BILL_STATUS-SIGN   = GC_INCLUDE.
     LRS_BILL_STATUS-OPTION = GC_EQUAL.
     LRS_BILL_STATUS-LOW    = GC_BILLSTAT_TODO.
     APPEND LRS_BILL_STATUS TO LRT_BILL_STATUS.
     LRS_DERIV_CATEGORY_2-SIGN    = GC_INCLUDE.
     LRS_DERIV_CATEGORY_2-OPTION  = GC_EQUAL.
     LRS_DERIV_CATEGORY_2-LOW     = IS_DLI-DERIV_CATEGORY.
     APPEND LRS_DERIV_CATEGORY_2 TO LRT_DERIV_CATEGORY_2.
     CALL FUNCTION '/1BEA/CRMB_DL_O_GETLIST'
       EXPORTING
         IV_SORTREL         = GC_SORT_BY_PRIMARY_KEY
         IRT_BILL_STATUS    = LRT_BILL_STATUS
         IRT_DERIV_CATEGORY = LRT_DERIV_CATEGORY_2
         IRT_LOGSYS = LRT_LOGSYS
         IRT_OBJTYPE = LRT_OBJTYPE
         IRT_SRC_HEADNO = LRT_SRC_HEADNO
         IRT_SRC_ITEMNO = LRT_SRC_ITEMNO
       IMPORTING
         ET_DLI             = GT_DLI_DGB.
   ENDIF.
   LT_DLI_WRK = GT_DLI_DGB.
   LOOP AT LT_DLI_BUF ASSIGNING <DLI>.
     READ TABLE LT_DLI_WRK TRANSPORTING NO FIELDS
       WITH KEY DLI_GUID = <DLI>-DLI_GUID
       BINARY SEARCH.
     CASE SY-SUBRC.
       WHEN 0.
         MODIFY LT_DLI_WRK FROM <DLI> INDEX SY-TABIX.
       WHEN 4.
         INSERT <DLI> INTO LT_DLI_WRK INDEX SY-TABIX.
       WHEN 8.
         APPEND <DLI> TO LT_DLI_WRK.
     ENDCASE.
   ENDLOOP.
   IF LT_DLI_WRK IS INITIAL.
     RETURN.
   ENDIF.

   SORT LT_DLI_WRK BY
        DERIV_CATEGORY DESCENDING
        LOGSYS DESCENDING
        OBJTYPE DESCENDING
        SRC_HEADNO DESCENDING
        SRC_ITEMNO DESCENDING.

   READ TABLE LT_DLI_WRK WITH KEY
     DERIV_CATEGORY = IS_DLI-DERIV_CATEGORY
     LOGSYS = IS_DLI-LOGSYS
     OBJTYPE = IS_DLI-OBJTYPE
     SRC_HEADNO = IS_DLI-SRC_HEADNO
     SRC_ITEMNO = IS_DLI-SRC_ITEMNO
     BILL_STATUS = IS_DLI-BILL_STATUS
     TRANSPORTING NO FIELDS.
   IF SY-SUBRC EQ 0.
     DELETE LT_DLI_WRK TO SY-TABIX.
   ELSE.
     IF IV_INP_PROC IS INITIAL.
       MESSAGE E286(BEA) WITH GC_P_DLI_ITEMNO GC_P_DLI_HEADNO
         INTO GV_DUMMY.
       PERFORM MSG_ADD USING SPACE SPACE SPACE SPACE CHANGING ET_RETURN.
       RETURN.
     ENDIF.
   ENDIF.
   CLEAR LT_DLI_DOC.
   CLEAR LT_DLI.
   CLEAR LS_DLI_WRK_F.
   LOOP AT LT_DLI_WRK INTO LS_DLI_WRK.
     LV_TABIX = SY-TABIX.
     IF LV_SEARCHING NE GC_TRUE.
       IF (
          LS_DLI_WRK-DERIV_CATEGORY NE IS_DLI-DERIV_CATEGORY OR
          LS_DLI_WRK-LOGSYS NE IS_DLI-LOGSYS OR
          LS_DLI_WRK-OBJTYPE NE IS_DLI-OBJTYPE OR
          LS_DLI_WRK-SRC_HEADNO NE IS_DLI-SRC_HEADNO OR
          LS_DLI_WRK-SRC_ITEMNO NE IS_DLI-SRC_ITEMNO
          ).
         LS_DLI_WRK_F = LS_DLI_WRK.
         LV_SEARCHING = GC_TRUE.
       ELSE.
         CONTINUE.
       ENDIF.
     ENDIF.
     IF (
        LS_DLI_WRK-DERIV_CATEGORY EQ LS_DLI_WRK_F-DERIV_CATEGORY AND
        LS_DLI_WRK-LOGSYS EQ LS_DLI_WRK_F-LOGSYS AND
        LS_DLI_WRK-OBJTYPE EQ LS_DLI_WRK_F-OBJTYPE AND
        LS_DLI_WRK-SRC_HEADNO EQ LS_DLI_WRK_F-SRC_HEADNO AND
        LS_DLI_WRK-SRC_ITEMNO EQ LS_DLI_WRK_F-SRC_ITEMNO
        ).
       APPEND LS_DLI_WRK TO LT_DLI_DOC.
     ELSE.
       CLEAR LT_RETURN.
       CLEAR LT_DLI_OV.
       CALL FUNCTION '/1BEA/CRMB_DL_O_GET_CHANGEABL'
         EXPORTING
           IT_DLI           = LT_DLI_DOC
         IMPORTING
           ET_DLI_WRK       = LT_DLI
           ET_RETURN        = LT_RETURN
           ET_DLI_OV        = LT_DLI_OV
         EXCEPTIONS
           REJECT           = 1
           OTHERS           = 2.
       IF SY-SUBRC NE 0.
         MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
           WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO GV_DUMMY.
         PERFORM MSG_ADD USING SPACE SPACE SPACE SPACE CHANGING ET_RETURN.
         RETURN.
       ENDIF.
       IF NOT LT_DLI_OV IS INITIAL.
         MESSAGE E287(BEA) WITH GC_P_DLI_ITEMNO GC_P_DLI_HEADNO
           INTO GV_DUMMY.
         PERFORM MSG_ADD USING SPACE SPACE SPACE SPACE CHANGING ET_RETURN.
         RETURN.
       ENDIF.
       IF NOT LT_DLI IS INITIAL.
         LV_TABIX_F = LV_TABIX.
         EXIT.
       ELSE.
         CLEAR LT_DLI_DOC.
         APPEND LS_DLI_WRK TO LT_DLI_DOC.
         LS_DLI_WRK_F = LS_DLI_WRK.
       ENDIF.
     ENDIF.
   ENDLOOP.
   IF LT_DLI IS INITIAL AND NOT LT_DLI_DOC IS INITIAL.
     CLEAR LV_TABIX_F.
     CLEAR LT_RETURN.
     CLEAR LT_DLI_OV.
     CALL FUNCTION '/1BEA/CRMB_DL_O_GET_CHANGEABL'
       EXPORTING
         IT_DLI           = LT_DLI_DOC
       IMPORTING
         ET_DLI_WRK       = LT_DLI
         ET_RETURN        = LT_RETURN
         ET_DLI_OV        = LT_DLI_OV
       EXCEPTIONS
         REJECT           = 1
         OTHERS           = 2.
     IF SY-SUBRC NE 0.
       MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO GV_DUMMY.
       PERFORM MSG_ADD USING SPACE SPACE SPACE SPACE CHANGING ET_RETURN.
       RETURN.
     ENDIF.
     IF NOT LT_DLI_OV IS INITIAL.
       MESSAGE E287(BEA) WITH GC_P_DLI_ITEMNO GC_P_DLI_HEADNO
         INTO GV_DUMMY.
       PERFORM MSG_ADD USING SPACE SPACE SPACE SPACE CHANGING ET_RETURN.
       RETURN.
     ENDIF.
   ENDIF.
   IF LT_DLI IS INITIAL.
     RETURN.
   ELSE.
* check for unbilled items prior to current date
     IF NOT LV_TABIX_F IS INITIAL.
       LOOP AT LT_DLI_WRK INTO LS_DLI_WRK FROM LV_TABIX_F
         WHERE BILL_STATUS EQ GC_BILLSTAT_TODO.
         EXIT.
       ENDLOOP.
       IF SY-SUBRC EQ 0.
         MESSAGE E287(BEA) WITH GC_P_DLI_ITEMNO GC_P_DLI_HEADNO
           INTO GV_DUMMY.
         PERFORM MSG_ADD USING SPACE SPACE SPACE SPACE CHANGING ET_RETURN.
         RETURN.
       ENDIF.
     ENDIF.
     IF NOT LT_DLI_BUF IS INITIAL.
       READ TABLE LT_DLI_BUF INTO LS_DLI_WRK WITH KEY
                        DERIV_CATEGORY = LS_DLI_WRK_F-DERIV_CATEGORY
                        LOGSYS = LS_DLI_WRK_F-LOGSYS
                        OBJTYPE = LS_DLI_WRK_F-OBJTYPE
                        SRC_HEADNO = LS_DLI_WRK_F-SRC_HEADNO
                        SRC_ITEMNO = LS_DLI_WRK_F-SRC_ITEMNO.
       IF LS_DLI_WRK IS INITIAL.
         MESSAGE E288(BEA) WITH GC_P_DLI_ITEMNO GC_P_DLI_HEADNO
           INTO GV_DUMMY.
         PERFORM MSG_ADD USING SPACE SPACE SPACE SPACE CHANGING ET_RETURN.
         RETURN.
       ENDIF.
     ENDIF.
   ENDIF.

 ENDIF.
 ET_DLI = LT_DLI.

ENDFUNCTION.

